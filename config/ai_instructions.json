{
  "general_instructions": [],
  "prompts": {
    "generate_scheme": [
      "Ich will einen Haidenhain Zyklus in Gcode umwandeln. ",
      "Gehe dafür über den Ablauf des Zyklus und gebe mir die Schritte wiefolgt beschrieben zurück",
      "Gib mir eine json Liste von GCode Operationen zurück. ",
      "Verwende möglichst nur die einfachsten GCode Befehle. ",
      "Es stehen für den Zyklus bereits die Position am Anfang des Zyklus mit den Parameter X, Y und Z zur Verfügung. Die Drehgeschwindigkeit steht durch den Parameter F zur verfügung. Diese können wie die Q-Parameter verwendet werden. Es dürfen auf keinen Fall weitere Parameter verwendet werden, als die die angegeben sind!",
      "Überprüfe bei den Q-Parametern ob diese definiert sind. Es werden eventuell nicht alle Parameter angegeben.",
      "Führe acuh die Navigation am Anfang des Zklus durch, um die Position mit X,Y und Z zu setzen. Also z.b. X{X} etc. Überprüfe auch die richtige Position am Ende des Zyklus.",
      "In args stehen die Argumente die der code benötigt. Diese Argumenete sind String elemente und werden mit den Q Parametern angegeben. Die Q-Parameter müssen innerhalb {} Klammern stehen, da diese von python verwendet werden. Wenn bereits klammern ausenrum sind, dann dürfen keine Klammern mehr direkt um die Parameter sein",
      "Du kannst auch math expressions benutzen, musst aber math.funktion benutzen. Zum Beispiel: math.sin(Q251)",
      "Jede Python Expression und jeder verwendeten Parameters außer die if und loop Bedingungen müssen in {} Klammern stehen. Es können aber nicht mehrere Klammern inneinander verschachtelt sein. Richtig: { 0 > Q200 }. Falsch: { 0 > {Q200} }. Richtig: {i <= (Q201  - Q369) / Q202 if (Q201  - Q369) / Q202 > 0 else 1}. Falsch: {i <= {({Q201}  - {Q369}) / {Q202} if ({Q201}  - {Q369}) / {Q202} > 0 else 1}}",
      "Achte auf mögliche Divide by Zero Fehler. Wenn du eine Division durch eine Variable machst, dann überprüfe ob die Variable 0 ist.",
      "Innerhalb der loop oder if bodys können können weitere loop oder if Bedingungen verwendet werden. ",
      "Für komplexere Zusammenhänge kann im String Python Syntax verwendet werden. Zum Beispiel: \"{Q251 * 2}\"",
      "Überlege gut ob du trigonmoische Formeln verwenden musst, oder ob es auch ohne geht. ",
      "Gebe nur das json aus und nichts anderes. Das Json muss mit einem Array starten. Also starten mit [ und enden mit ].",
      "Das json Objekt muss nach folgendem Json-Schema aufgebaut werden: ",
      "{\r\n        \"type\": \"array\",\r\n        \"items\": [\r\n          {\r\n            \"type\": \"object\",\r\n            \"properties\": {\r\n              \"code\": {\r\n                \"type\": \"string\" // must be a Gcode command\r\n              },\r\n              \"args\": {\r\n                \"type\": \"array\",\r\n                \"items\": [\r\n                  {\r\n                    \"type\": \"string\"\r\n                  }\r\n                ]\r\n              }\r\n            },\r\n            \"required\": [\r\n              \"code\",\r\n              \"args\"\r\n            ]\r\n          },\r\n          {\r\n            \"type\": \"object\",\r\n            \"properties\": {\r\n              \"loop\": {\r\n                \"type\": \"string\" // value is a while-loop condition. use \"i\" as looping index. i starts at 1 and increments every round automaticly. Dont initialize \"i\", only use it. \"i\" can also be used in body. This must be a Python expression. Dont use curly braces for this condition as everythin in there gets evaluated as a single python expression.\r\n              },\r\n              \"body\": {\r\n                \"$ref\": \"#/items\"\r\n              }\r\n            },\r\n            \"required\": [\r\n              \"loop\",\r\n              \"body\"\r\n            ]\r\n          },\r\n          {\r\n            \"type\": \"object\",\r\n            \"properties\": {\r\n              \"if\": {\r\n                \"type\": \"string\" // value is if condition. this must be a Python expression. Dont use curly braces for for this condition.\r\n              },\r\n              \"body\": {\r\n                \"$ref\": \"#/items\"\r\n              }\r\n            },\r\n            \"required\": [\r\n              \"loop\",\r\n              \"body\"\r\n            ]\r\n          },\r\n        ]\r\n      }",
      "Entnehme die Zyklusdefinition aus folgenden Texten:"
    ],
    "get_cycle_steps_old": [
      "Gib mir eine String list im Json format zurück mit jedem Zyklusablauf schritt.",
      "Gebe nur die tatsächlichen Zyklusabläufe aus.",
      "Die Schritte starten immer mit einer Zahl.",
      "Jeder Schritt soll in einem String sein. Also im eine Zahl plus Beschreibung pro Listenelement.",
      "Gebe nur das json aus und nichts anderes.",
      "Entnehme die Informatinen aus folgenden Texten:"
    ],
    "get_cycle_steps": [
      "Gib mir im json format mit dem key \"description\" die Zyklusablaufbeschreibung zurück. ",
      "Diese kommt als erstes unter Zyklusablauf ",
      "Unter dem key \"steps\" sollen die tatsächlichen Zyklusabläufe in einer liste zurückgegeben werden. ",
      "Jeder Schritt beginnt immer mit einer Zahl und soll ein einziges Listenelement beziehungsweise String sein. ",
      "Gebe nur das json aus und nicht anderes. ",
      "Entnehme die Informationen aus folgenden Text Blöcken:"
    ],
    "get_cycle_params": [
      "Gib mir eine String list im Json format zurück mit jedem Zyklusparameter und der Beschreibung.",
      "Alle wichtigen Zyklusparameter sind unter Zyklusparameter, verwende nicht die Parameter die nicht unter Zyklusparameter gelistet sind",
      "Die Parameter beginnen immer mit Q und dann einer Zahl, danach folgt der Name und dann die Beschreibung",
      "Ein List element ist immer Q-Parameter Name Beschreibung",
      "Gebe nur das json aus und nichts anderes.",
      "Entnehme die Informatinen aus folgenden Text Blöcken:"
    ]
  }
}